import { flavorCategoryService } from './../../../../../services/Flavors/FlavorCategoryService';

export class FlavorValidator {
  constructor(apiConfig = {}) {
    // Usar el servicio de sabores y categor√≠as que ya tienes implementado
    this.flavorCategoryService = flavorCategoryService;
    
    // Cache de sabores por categor√≠a para evitar consultas repetidas
    this.flavorsByCategory = new Map();
    
    // Cache de categor√≠as v√°lidas procesadas
    this.processedCategories = new Set();
    
    console.log('üç¶ FlavorValidator: Inicializado');
  }

  // ‚úÖ FUNCI√ìN AUXILIAR: Verificar si un valor est√° vac√≠o de forma robusta
  isValueEmpty(value) {
    if (value === null || value === undefined) {
      return true;
    }
    
    if (typeof value === 'string') {
      return value.trim() === '';
    }
    
    // Para n√∫meros, 0 es un valor v√°lido
    if (typeof value === 'number') {
      return false;
    }
    
    return String(value).trim() === '';
  }

  // ‚úÖ FUNCI√ìN AUXILIAR: Normalizar string de forma robusta
  normalizeString(str) {
    if (this.isValueEmpty(str)) {
      return '';
    }
    return String(str).toLowerCase().trim();
  }

  // ‚úÖ FUNCI√ìN PRINCIPAL: Obtener sabores activos para una categor√≠a espec√≠fica
  async fetchFlavorsForCategory(categoryName) {
    try {
      console.log('üîç FlavorValidator: Obteniendo sabores para categor√≠a:', categoryName);
      
      // ‚úÖ NORMALIZAR el nombre de categor√≠a para el cache
      const normalizedCategoryName = this.normalizeString(categoryName);
      
      // Verificar si ya tenemos los sabores en cache (usando nombre normalizado)
      if (this.flavorsByCategory.has(normalizedCategoryName)) {
        const cachedFlavors = this.flavorsByCategory.get(normalizedCategoryName);
        console.log('‚úÖ FlavorValidator: Usando sabores en cach√© para', categoryName, ':', cachedFlavors.length);
        return {
          success: true,
          flavors: cachedFlavors,
          count: cachedFlavors.length
        };
      }

      // Obtener todas las categor√≠as con sus sabores
      const categoriesResult = await this.flavorCategoryService.getCategoriesWithFlavors();
      
      if (!categoriesResult.success) {
        throw new Error(categoriesResult.error || 'Error al obtener categor√≠as con sabores');
      }

      console.log('üì¶ FlavorValidator: Categor√≠as con sabores obtenidas:', categoriesResult.data.length);

      // ‚úÖ MEJORAR: Buscar la categor√≠a espec√≠fica con normalizaci√≥n robusta
      const targetCategory = categoriesResult.data.find(category => 
        this.normalizeString(category.categoria) === normalizedCategoryName
      );

      if (!targetCategory) {
        console.warn('‚ö†Ô∏è FlavorValidator: Categor√≠a no encontrada:', categoryName);
        console.warn('   üìã Categor√≠as disponibles:', categoriesResult.data.map(c => c.categoria));
        return {
          success: false,
          error: `Categor√≠a "${categoryName}" no encontrada en la base de datos de sabores`,
          flavors: [],
          count: 0,
          availableCategories: categoriesResult.data.map(c => c.categoria)
        };
      }

      console.log('‚úÖ FlavorValidator: Categor√≠a encontrada:', targetCategory.categoria);

      // Filtrar solo sabores activos
      const activeFlavors = targetCategory.flavors.filter(flavor => flavor.status === 1);
      
      console.log('üç¶ FlavorValidator: Sabores activos encontrados para', categoryName, ':', activeFlavors.length);
      console.log('   - Sabores:', activeFlavors.map(f => f.name));

      // ‚úÖ GUARDAR en cache usando nombre normalizado
      this.flavorsByCategory.set(normalizedCategoryName, activeFlavors);
      this.processedCategories.add(normalizedCategoryName);

      return {
        success: true,
        flavors: activeFlavors,
        count: activeFlavors.length
      };

    } catch (error) {
      console.error('‚ùå FlavorValidator: Error al obtener sabores para categor√≠a:', error);
      return {
        success: false,
        error: error.message,
        flavors: [],
        count: 0
      };
    }
  }

  // ‚úÖ FUNCI√ìN PRINCIPAL: Validar el flavor_count para una categor√≠a espec√≠fica
  async validateFlavorCount(categoryName, flavorCountValue) {
    try {
      console.log('üîç FlavorValidator: Validando flavor_count:', flavorCountValue, 'para categor√≠a:', categoryName);
      
      // ‚úÖ CAMBIO: Validar par√°metros de entrada - categor√≠a vac√≠a es ERROR
      if (this.isValueEmpty(categoryName)) {
        return {
          valid: false,
          reason: 'EMPTY_CATEGORY',
          originalValue: flavorCountValue,
          correctedValue: null, // ‚úÖ No corregir, es un error
          maxAllowed: null,
          message: 'No se puede validar flavor_count: categor√≠a vac√≠a'
        };
      }

      // Si flavor_count est√° vac√≠o, asignar 0 por defecto
      if (this.isValueEmpty(flavorCountValue)) {
        console.log('   ‚ÑπÔ∏è Flavor_count vac√≠o, asignando 0');
        return {
          valid: true,
          reason: 'EMPTY_ASSIGNED_ZERO',
          originalValue: flavorCountValue,
          correctedValue: 0,
          maxAllowed: 0,
          message: 'Flavor_count vac√≠o, asignado 0 por defecto'
        };
      }

      // Convertir a n√∫mero
      const flavorCount = parseInt(flavorCountValue, 10);
      if (isNaN(flavorCount)) {
        console.log('   ‚ùå Flavor_count no es un n√∫mero v√°lido:', flavorCountValue);
        return {
          valid: false,
          reason: 'INVALID_NUMBER',
          originalValue: flavorCountValue,
          correctedValue: null, // ‚úÖ No corregir autom√°ticamente
          maxAllowed: null,
          message: 'Flavor_count debe ser un n√∫mero v√°lido'
        };
      }

      // Los n√∫meros negativos se consideran error
      if (flavorCount < 0) {
        console.log('   ‚ùå Flavor_count negativo no permitido:', flavorCount);
        return {
          valid: false,
          reason: 'NEGATIVE_NOT_ALLOWED',
          originalValue: flavorCountValue,
          correctedValue: null, // ‚úÖ No corregir autom√°ticamente
          maxAllowed: null,
          message: 'Flavor_count no puede ser negativo'
        };
      }

      // ‚úÖ OBTENER sabores disponibles para la categor√≠a
      const flavorsResult = await this.fetchFlavorsForCategory(categoryName);
      
      // ‚úÖ CAMBIO CR√çTICO: Si la categor√≠a no existe en sabores, es ERROR
      if (!flavorsResult.success) {
        console.error('‚ùå FlavorValidator: Categor√≠a no encontrada en base de datos de sabores:', categoryName);
        return {
          valid: false,
          reason: 'CATEGORY_NOT_FOUND_IN_FLAVORS',
          originalValue: flavorCountValue,
          correctedValue: null, // ‚úÖ No corregir
          maxAllowed: null,
          message: `Categor√≠a "${categoryName}" no encontrada en la base de datos de sabores. Verifique que la categor√≠a sea v√°lida.`,
          error: flavorsResult.error,
          availableCategories: flavorsResult.availableCategories || []
        };
      }

      const maxAllowedFlavors = flavorsResult.count;
      console.log('   üìä Sabores m√°ximos permitidos para', categoryName, ':', maxAllowedFlavors);

      // ‚úÖ VALIDAR que no exceda el m√°ximo
      if (flavorCount > maxAllowedFlavors) {
        console.log('   ‚ö†Ô∏è Flavor_count excede el m√°ximo:', flavorCount, '>', maxAllowedFlavors);
        return {
          valid: false, // ‚úÖ CAMBIO: Marcarlo como inv√°lido para que vaya a correcci√≥n manual
          reason: 'EXCEEDED_LIMIT',
          originalValue: flavorCountValue,
          correctedValue: null, // ‚úÖ No corregir autom√°ticamente
          maxAllowed: maxAllowedFlavors,
          message: `Flavor_count ${flavorCount} excede el m√°ximo de ${maxAllowedFlavors} sabores disponibles para "${categoryName}". Debe corregirse manualmente.`
        };
      }

      // ‚úÖ TODO est√° bien
      console.log('   ‚úÖ Flavor_count v√°lido:', flavorCount, '<=', maxAllowedFlavors);
      return {
        valid: true,
        reason: 'VALID',
        originalValue: flavorCountValue,
        correctedValue: flavorCount,
        maxAllowed: maxAllowedFlavors,
        message: `Flavor_count ${flavorCount} es v√°lido para "${categoryName}"`
      };

    } catch (error) {
      console.error('‚ùå FlavorValidator: Error validando flavor_count:', error);
      return {
        valid: false,
        reason: 'VALIDATION_ERROR',
        originalValue: flavorCountValue,
        correctedValue: null, // ‚úÖ No corregir en caso de error
        maxAllowed: null,
        message: `Error validando flavor_count: ${error.message}`
      };
    }
  }

  // ‚úÖ FUNCI√ìN DE CONVENIENCIA: Obtener resumen de sabores por categor√≠a
  async getFlavorsSummary() {
    try {
      console.log('üìä FlavorValidator: Generando resumen de sabores...');
      
      const categoriesResult = await this.flavorCategoryService.getCategoriesWithFlavors();
      
      if (!categoriesResult.success) {
        throw new Error(categoriesResult.error);
      }

      const summary = categoriesResult.data.map(category => ({
        categoryName: category.categoria,
        totalFlavors: category.flavors.length,
        activeFlavors: category.flavors.filter(f => f.status === 1).length,
        inactiveFlavors: category.flavors.filter(f => f.status !== 1).length,
        flavorNames: category.flavors
          .filter(f => f.status === 1)
          .map(f => f.name)
      }));

      console.log('üìã FlavorValidator: Resumen generado:', summary);
      
      return {
        success: true,
        data: summary,
        message: `Resumen de ${summary.length} categor√≠as generado`
      };

    } catch (error) {
      console.error('‚ùå FlavorValidator: Error generando resumen:', error);
      return {
        success: false,
        error: error.message,
        data: []
      };
    }
  }

  // ‚úÖ FUNCI√ìN DE UTILIDAD: Limpiar cache
  clearCache() {
    this.flavorsByCategory.clear();
    this.processedCategories.clear();
    console.log('üßπ FlavorValidator: Cache limpiado');
  }

  // ‚úÖ FUNCI√ìN DE UTILIDAD: Obtener sabores en cache para una categor√≠a
  getCachedFlavors(categoryName) {
    const normalizedName = this.normalizeString(categoryName);
    return this.flavorsByCategory.get(normalizedName) || [];
  }

  // ‚úÖ FUNCI√ìN DE UTILIDAD: Verificar si una categor√≠a ya fue procesada
  isCategoryProcessed(categoryName) {
    const normalizedName = this.normalizeString(categoryName);
    return this.processedCategories.has(normalizedName);
  }

  // ‚úÖ FUNCI√ìN EST√ÅTICA: Crear desde configuraci√≥n API (para compatibilidad)
  static async createFromAPI(apiConfig = {}) {
    console.log('üè≠ FlavorValidator: Creando desde API...');
    
    const validator = new FlavorValidator(apiConfig);
    
    // Pre-cargar datos si es necesario
    // const summary = await validator.getFlavorsSummary();
    
    return validator;
  }
}