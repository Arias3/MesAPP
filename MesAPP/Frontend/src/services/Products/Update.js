import { productAPI, APIFactory } from './ProductsSearch.js';

/**
 * UpsertProcessor - Componente modular para procesar productos con l√≥gica UPSERT
 * Se integra despu√©s de CategoryValidator y FieldNormalizer
 * 
 * ‚úÖ CORREGIDO: Usa la nueva ruta de b√∫squeda por c√≥digo
 */
export class UpsertProcessor {
  constructor(apiConfig = {}) {
    // Usar la misma configuraci√≥n que ImportButtonLogic
    if (Object.keys(apiConfig).length > 0) {
      this.productAPI = APIFactory.createProductAPI(apiConfig);
    } else {
      this.productAPI = productAPI;
    }
  }

  /**
   * ‚úÖ CORREGIDO: Buscar producto por c√≥digo usando la nueva ruta espec√≠fica
   */
  async findProductByCode(code) {
    try {
      console.log(`üîç UpsertProcessor: Buscando producto por c√≥digo exacto: "${code}"`);
      
      // ‚úÖ USAR LA NUEVA RUTA ESPEC√çFICA PARA B√öSQUEDA POR C√ìDIGO
      const result = await this.productAPI.findByCode(code);
      
      if (!result.success) {
        console.error(`‚ùå UpsertProcessor: Error t√©cnico buscando c√≥digo "${code}":`, result.error);
        return { 
          found: false, 
          product: null, 
          error: result.error 
        };
      }
      
      if (result.found) {
        console.log(`‚úÖ UpsertProcessor: Producto encontrado con c√≥digo "${code}":`, result.data.id);
        return {
          found: true,
          product: result.data
        };
      } else {
        console.log(`‚ùå UpsertProcessor: Producto con c√≥digo "${code}" no existe en BD`);
        return {
          found: false,
          product: null
        };
      }
      
    } catch (error) {
      console.error(`‚ùå UpsertProcessor: Excepci√≥n buscando c√≥digo "${code}":`, error);
      return { 
        found: false, 
        product: null, 
        error: error.message 
      };
    }
  }

  /**
   * ‚úÖ CORREGIDO: Crear producto nuevo con mapping correcto de campos
   */
  async createProduct(normalizedProduct) {
    try {
      console.log(`‚ûï UpsertProcessor: Creando producto nuevo con c√≥digo: "${normalizedProduct.code}"`);
      
      // ‚úÖ MAPPING CORREGIDO: Usar los nombres de campo que espera el backend
      const productData = {
        codigo: normalizedProduct.code,      // ‚úÖ Campo para el c√≥digo
        nombre: normalizedProduct.name,      // ‚úÖ Nombre
        costo: parseFloat(normalizedProduct.cost),
        precio: parseFloat(normalizedProduct.price),
        stock: normalizedProduct.stock.toString(),
        barcode: normalizedProduct.barcode,
        category: normalizedProduct.category,
        unit: normalizedProduct.unit,        // ‚úÖ Verificado: es "unit" no "unity"
        image_url: normalizedProduct.image_url,
        flavor_count: parseInt(normalizedProduct.flavor_count),
        description: normalizedProduct.description
      };

      console.log(`üì§ UpsertProcessor: Datos a crear:`, productData);

      const result = await this.productAPI.createProduct(productData);
      
      if (result.success) {
        console.log(`‚úÖ UpsertProcessor: Producto creado exitosamente:`, result.data?.id);
        return {
          success: true,
          action: 'CREATE',
          code: normalizedProduct.code,
          productId: result.data?.id,
          message: `Producto "${normalizedProduct.code}" creado exitosamente`
        };
      } else {
        console.error(`‚ùå UpsertProcessor: Error creando producto "${normalizedProduct.code}":`, result.error);
        return {
          success: false,
          action: 'CREATE',
          code: normalizedProduct.code,
          message: `Error creando "${normalizedProduct.code}": ${result.error}`
        };
      }
      
    } catch (error) {
      console.error(`‚ùå UpsertProcessor: Excepci√≥n creando producto "${normalizedProduct.code}":`, error);
      return {
        success: false,
        action: 'CREATE',
        code: normalizedProduct.code,
        message: `Excepci√≥n creando "${normalizedProduct.code}": ${error.message}`
      };
    }
  }

  /**
   * ‚úÖ MEJORADO: Actualizar producto existente
   */
  async updateProduct(existingProduct, normalizedProduct) {
    try {
      console.log(`‚úèÔ∏è UpsertProcessor: Actualizando producto existente ID ${existingProduct.id} con c√≥digo: "${normalizedProduct.code}"`);
      
      // ‚úÖ MAPPING CORRECTO: Para UPDATE no enviamos el c√≥digo (es inmutable)
      const productData = {
        nombre: normalizedProduct.name,
        costo: parseFloat(normalizedProduct.cost),
        precio: parseFloat(normalizedProduct.price),
        stock: normalizedProduct.stock.toString(),
        barcode: normalizedProduct.barcode,
        category: normalizedProduct.category,
        unit: normalizedProduct.unit,
        image_url: normalizedProduct.image_url,
        flavor_count: parseInt(normalizedProduct.flavor_count),
        description: normalizedProduct.description
        // ‚úÖ NOTA: No enviamos 'codigo' en UPDATE porque es la clave de b√∫squeda
      };

      console.log(`üì§ UpsertProcessor: Datos a actualizar:`, productData);

      const result = await this.productAPI.updateProduct(existingProduct.id, productData);
      
      if (result.success) {
        console.log(`‚úÖ UpsertProcessor: Producto actualizado exitosamente ID ${existingProduct.id}`);
        return {
          success: true,
          action: 'UPDATE',
          code: normalizedProduct.code,
          productId: existingProduct.id,
          message: `Producto "${normalizedProduct.code}" actualizado exitosamente`
        };
      } else {
        console.error(`‚ùå UpsertProcessor: Error actualizando producto "${normalizedProduct.code}":`, result.error);
        return {
          success: false,
          action: 'UPDATE',
          code: normalizedProduct.code,
          message: `Error actualizando "${normalizedProduct.code}": ${result.error}`
        };
      }
      
    } catch (error) {
      console.error(`‚ùå UpsertProcessor: Excepci√≥n actualizando producto "${normalizedProduct.code}":`, error);
      return {
        success: false,
        action: 'UPDATE',
        code: normalizedProduct.code,
        message: `Excepci√≥n actualizando "${normalizedProduct.code}": ${error.message}`
      };
    }
  }

  /**
   * ‚úÖ L√ìGICA PRINCIPAL: Procesar un producto individual con UPSERT
   * 
   * REGLA √öNICA: Solo el c√≥digo determina CREATE vs UPDATE
   * - Si c√≥digo existe en BD ‚Üí UPDATE (actualizar TODOS los campos)
   * - Si c√≥digo NO existe en BD ‚Üí CREATE
   */
  async processProduct(normalizedProduct) {
    try {
      const code = normalizedProduct.code;
      
      console.log(`\nüéØ UpsertProcessor: === PROCESANDO PRODUCTO "${code}" ===`);
      
      // ‚úÖ PASO 1: Buscar por c√≥digo exacto usando la nueva ruta
      console.log(`üîç UpsertProcessor: Paso 1 - Buscando si c√≥digo "${code}" existe...`);
      const searchResult = await this.findProductByCode(code);
      
      if (searchResult.error) {
        console.error(`‚ùå UpsertProcessor: Error t√©cnico en b√∫squeda:`, searchResult.error);
        return {
          success: false,
          action: 'ERROR',
          code: code,
          message: `Error buscando c√≥digo "${code}": ${searchResult.error}`
        };
      }
      
      // ‚úÖ PASO 2: Decidir CREATE vs UPDATE basado SOLO en si el c√≥digo existe
      let result;
      
      if (searchResult.found) {
        // ‚úÖ C√ìDIGO EXISTE ‚Üí UPDATE (actualizar TODOS los campos)
        console.log(`üîÑ UpsertProcessor: Paso 2 - C√≥digo "${code}" existe (ID: ${searchResult.product.id}), ACTUALIZANDO todos los campos...`);
        result = await this.updateProduct(searchResult.product, normalizedProduct);
        
      } else {
        // ‚úÖ C√ìDIGO NO EXISTE ‚Üí CREATE
        console.log(`‚ûï UpsertProcessor: Paso 2 - C√≥digo "${code}" NO existe, CREANDO producto nuevo...`);
        result = await this.createProduct(normalizedProduct);
      }
      
      console.log(`üéØ UpsertProcessor: === RESULTADO PARA "${code}": ${result.action} - ${result.success ? '√âXITO' : 'FALL√ì'} ===\n`);
      
      return result;
      
    } catch (error) {
      console.error(`üí• UpsertProcessor: Excepci√≥n procesando producto "${normalizedProduct.code}":`, error);
      return {
        success: false,
        action: 'ERROR',
        code: normalizedProduct.code,
        message: `Excepci√≥n procesando "${normalizedProduct.code}": ${error.message}`
      };
    }
  }

  /**
   * ‚úÖ MEJORADO: Procesar m√∫ltiples productos con UPSERT
   */
  async processProducts(normalizedProducts, onProgress = null) {
    console.log(`\nüöÄ UpsertProcessor: === INICIANDO PROCESAMIENTO MASIVO ===`);
    console.log(`üìä UpsertProcessor: Total de productos a procesar: ${normalizedProducts.length}`);
    
    const results = {
      total: normalizedProducts.length,
      created: 0,
      updated: 0,
      errors: 0,
      details: [],
      summary: {
        processedCodes: [],
        errorCodes: [],
        createdCodes: [],
        updatedCodes: []
      }
    };

    for (let i = 0; i < normalizedProducts.length; i++) {
      const product = normalizedProducts[i];
      const progress = `${i + 1}/${normalizedProducts.length}`;
      
      console.log(`\nüìã UpsertProcessor: [${progress}] Procesando c√≥digo: "${product.code}"`);
      onProgress?.(`[${progress}] Procesando: ${product.code}`);

      const result = await this.processProduct(product);
      
      // Registrar resultado detallado
      results.details.push({
        code: result.code,
        action: result.action,
        success: result.success,
        message: result.message,
        productId: result.productId
      });

      // Actualizar contadores
      results.summary.processedCodes.push(result.code);
      
      if (result.success) {
        if (result.action === 'CREATE') {
          results.created++;
          results.summary.createdCodes.push(result.code);
        } else if (result.action === 'UPDATE') {
          results.updated++;
          results.summary.updatedCodes.push(result.code);
        }
      } else {
        results.errors++;
        results.summary.errorCodes.push(result.code);
      }

      // Pausa peque√±a para no saturar la BD
      if (i % 3 === 0 && i > 0) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    console.log(`\nüéØ UpsertProcessor: === PROCESAMIENTO COMPLETADO ===`);
    console.log(`üìä Resumen final:`);
    console.log(`   ‚úÖ Creados: ${results.created} productos`);
    console.log(`   üîÑ Actualizados: ${results.updated} productos`);
    console.log(`   ‚ùå Errores: ${results.errors} productos`);
    console.log(`   üìã Total procesado: ${results.total} productos`);
    
    if (results.summary.createdCodes.length > 0) {
      console.log(`   ‚ûï C√≥digos creados:`, results.summary.createdCodes);
    }
    if (results.summary.updatedCodes.length > 0) {
      console.log(`   ‚úèÔ∏è C√≥digos actualizados:`, results.summary.updatedCodes);
    }
    if (results.summary.errorCodes.length > 0) {
      console.log(`   üí• C√≥digos con error:`, results.summary.errorCodes);
    }

    return results;
  }
}