import { statisticsClient } from './StatisticsClient.js';

/**
 * StatisticsService - Servicio para gesti√≥n de estad√≠sticas
 */
export class StatisticsService {
  constructor(client = statisticsClient) {
    this.client = client;
    this.categoriesConfig = null; // Cache para configuraci√≥n de categor√≠as
    this.lastConfigUpdate = null;
  }

  /**
   * Obtener estad√≠sticas generales del inventario
   */
  async getGeneralStatistics() {
    try {
      console.log('üìä StatisticsService: Obteniendo estad√≠sticas generales...');
      
      const response = await this.client.getGeneralStatistics();
      
      return {
        success: true,
        data: response.data,
        message: response.message
      };
    } catch (error) {
      console.error('‚ùå StatisticsService: Error obteniendo estad√≠sticas generales:', error.message);
      
      return {
        success: false,
        error: error.message,
        data: null
      };
    }
  }

  /**
   * Obtener configuraci√≥n de categor√≠as con cache
   */
  async getCategoriesConfig(forceRefresh = false) {
    try {
      // Si tenemos cache y no se fuerza refresh, usar cache
      if (this.categoriesConfig && !forceRefresh && this.lastConfigUpdate) {
        const timeSinceUpdate = Date.now() - this.lastConfigUpdate;
        const cacheValidTime = 5 * 60 * 1000; // 5 minutos
        
        if (timeSinceUpdate < cacheValidTime) {
          console.log('üíæ StatisticsService: Usando configuraci√≥n desde cache');
          return {
            success: true,
            data: this.categoriesConfig,
            cached: true,
            message: 'Configuraci√≥n obtenida desde cache'
          };
        }
      }

      console.log('üìä StatisticsService: Obteniendo configuraci√≥n de categor√≠as...');
      
      const response = await this.client.getCategoriesConfig();
      
      // Guardar en cache
      this.categoriesConfig = response.data;
      this.lastConfigUpdate = Date.now();
      
      console.log('‚úÖ StatisticsService: Configuraci√≥n obtenida y guardada en cache');
      console.log('üìã StatisticsService: Total categor√≠as:', response.total);
      
      return {
        success: true,
        data: response.data,
        cached: false,
        total: response.total,
        message: response.message
      };
    } catch (error) {
      console.error('‚ùå StatisticsService: Error obteniendo configuraci√≥n de categor√≠as:', error.message);
      
      return {
        success: false,
        error: error.message,
        data: null
      };
    }
  }

  /**
   * Obtener estad√≠sticas por categor√≠a
   */
  async getStatisticsByCategory() {
    try {
      console.log('üìä StatisticsService: Obteniendo estad√≠sticas por categor√≠a...');
      
      const response = await this.client.getStatisticsByCategory();
      
      return {
        success: true,
        data: response.data,
        total: response.total,
        message: response.message
      };
    } catch (error) {
      console.error('‚ùå StatisticsService: Error obteniendo estad√≠sticas por categor√≠a:', error.message);
      
      return {
        success: false,
        error: error.message,
        data: []
      };
    }
  }

  /**
   * Obtener estado de stock de un producto basado en su categor√≠a
   * Esta es la funci√≥n clave que reemplaza getStockStatus est√°tico
   */
  async getStockStatus(stock, category) {
    try {
      // Obtener configuraci√≥n de categor√≠as
      const configResult = await this.getCategoriesConfig();
      
      if (!configResult.success || !configResult.data.config) {
        console.warn('‚ö†Ô∏è StatisticsService: No se pudo obtener configuraci√≥n, usando valores por defecto');
        // Fallback a l√≥gica original
        if (stock === 0) return "Sin Stock";
        if (stock < 10) return "Bajo Stock";
        return "Normal";
      }

      const categoryConfig = configResult.data.config[category];
      
      if (!categoryConfig) {
        console.warn(`‚ö†Ô∏è StatisticsService: Categor√≠a "${category}" no encontrada en configuraci√≥n`);
        // Fallback a l√≥gica original
        if (stock === 0) return "Sin Stock";
        if (stock < 10) return "Bajo Stock";
        return "Normal";
      }

      // L√≥gica din√°mica basada en low_stock de la categor√≠a
      if (stock === 0) return "Sin Stock";
      if (stock > 0 && stock <= categoryConfig.low_stock) return "Bajo Stock";
      return "Normal";

    } catch (error) {
      console.error('‚ùå StatisticsService: Error calculando estado de stock:', error.message);
      // Fallback a l√≥gica original en caso de error
      if (stock === 0) return "Sin Stock";
      if (stock < 10) return "Bajo Stock";
      return "Normal";
    }
  }

  /**
   * Funci√≥n helper para obtener estado de stock de m√∫ltiples productos
   * Optimizada para procesar lotes sin m√∫ltiples peticiones
   */
  async getMultipleStockStatus(products) {
    try {
      console.log('üìä StatisticsService: Calculando estado de stock para m√∫ltiples productos...');
      
      // Obtener configuraci√≥n una sola vez
      const configResult = await this.getCategoriesConfig();
      
      if (!configResult.success || !configResult.data.config) {
        console.warn('‚ö†Ô∏è StatisticsService: Usando valores por defecto para todos los productos');
        return products.map(product => ({
          ...product,
          stockStatus: this._getDefaultStockStatus(product.stock)
        }));
      }

      const config = configResult.data.config;
      
      // Procesar todos los productos con la configuraci√≥n
      const productsWithStatus = products.map(product => {
        const categoryConfig = config[product.category];
        let stockStatus;

        if (!categoryConfig) {
          console.warn(`‚ö†Ô∏è StatisticsService: Categor√≠a "${product.category}" no encontrada`);
          stockStatus = this._getDefaultStockStatus(product.stock);
        } else {
          if (product.stock === 0) {
            stockStatus = "Sin Stock";
          } else if (product.stock > 0 && product.stock <= categoryConfig.low_stock) {
            stockStatus = "Bajo Stock";
          } else {
            stockStatus = "Normal";
          }
        }

        return {
          ...product,
          stockStatus: stockStatus
        };
      });

      console.log('‚úÖ StatisticsService: Estados de stock calculados para', products.length, 'productos');
      return productsWithStatus;

    } catch (error) {
      console.error('‚ùå StatisticsService: Error calculando estados m√∫ltiples:', error.message);
      // Fallback: devolver productos con estados por defecto
      return products.map(product => ({
        ...product,
        stockStatus: this._getDefaultStockStatus(product.stock)
      }));
    }
  }

  /**
   * Funci√≥n helper privada para estado de stock por defecto (fallback)
   */
  _getDefaultStockStatus(stock) {
    if (stock === 0) return "Sin Stock";
    if (stock < 10) return "Bajo Stock";
    return "Normal";
  }

  /**
   * Limpiar cache de configuraci√≥n
   */
  clearCache() {
    console.log('üßπ StatisticsService: Limpiando cache de configuraci√≥n...');
    this.categoriesConfig = null;
    this.lastConfigUpdate = null;
  }

  /**
   * Verificar si el cache es v√°lido
   */
  isCacheValid() {
    if (!this.categoriesConfig || !this.lastConfigUpdate) return false;
    
    const timeSinceUpdate = Date.now() - this.lastConfigUpdate;
    const cacheValidTime = 5 * 60 * 1000; // 5 minutos
    
    return timeSinceUpdate < cacheValidTime;
  }
}

// Instancia por defecto
export const statisticsService = new StatisticsService();

export default StatisticsService;